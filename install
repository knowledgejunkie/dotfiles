#!/bin/bash

# Copyright (c) Nick Morrott 2016-2018

DATE=`date +%s`

#----------------------- installation locations ------------------------------
DOTFILES_DIRECTORY="${HOME}/.dotfiles"
FONTS_DIRECTORY="${HOME}/.local/share/fonts"
PREZTO_DIRECTORY="${HOME}/.zprezto"
I3BLOCKS_DIRECTORY="${HOME}/.i3blocks-contrib"
BACKUP_DIRECTORY="${HOME}/.dotfiles-backup/${DATE}"
XDG_CONFIG_DIRECTORY="${HOME}/.config"
FZF_DIRECTORY="${HOME}/.fzf"

#---------------------------- available modules ------------------------------
available_modules=("i3" "prezto" "tmux" "vim" "irssi" "fonts" "dotfiles")

#---------------------------- requested modules ------------------------------
requested_modules="$@"

#------------------------------- general subs --------------------------------
is_installable() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

link() {
  if [ -h "${HOME}/${2}" ]; then
    echo "    Deleting symlink ${HOME}/${2}"
    rm -f ${HOME}/${2}
  elif [ -f "${HOME}/${2}" ]; then
    backup_dotfile "${HOME}/${2}"
  elif [ -d "${HOME}/${2}" ]; then
    backup_dotfile "${HOME}/${2}"
  fi

  echo "    Creating symlink ${HOME}/${2}"
  ln -s "${1}" "${HOME}/${2}"
}

backup_dotfile() {
  if [ ! -e ${BACKUP_DIRECTORY} ]; then
    mkdir -p ${BACKUP_DIRECTORY}
  fi

  echo "    Backing up ${1} to ${BACKUP_DIRECTORY}"
  mv ${1} ${BACKUP_DIRECTORY} >/dev/null
}

#----------------------------------- fonts -----------------------------------
copy_fonts() {
    mkdir -p ${FONTS_DIRECTORY}
    echo "  Copying font files into local font cache..."
    find "${DOTFILES_DIRECTORY}/.local/share/fonts" -name '*.[o,t]tf' -type f -print0 | xargs -0 -I % cp "%" "${FONTS_DIRECTORY}/"
}

reset_font_cache() {
  if command -v fc-cache @>/dev/null ; then
    echo "  Resetting font cache..."
    fc-cache -f ${FONTS_DIRECTORY}
  fi
}

#-------------------------------- zsh/prezto ---------------------------------
download_prezto() {
  if [ ! -e "${PREZTO_DIRECTORY}" ]; then
    # Clone the upstream Prezto repo
    echo "  Cloning upstream 'prezto' repository..."
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${PREZTO_DIRECTORY}" >/dev/null
  else
    # Update the upstream Prezto repo if we already have it
    echo "  Updating upstream 'prezto' repository..."
    cd ${PREZTO_DIRECTORY}
    git pull --recurse-submodules >/dev/null
    git submodule update --recursive >/dev/null
fi
}

configure_prezto() {
  echo "  Configuring..."
  link "${DOTFILES_DIRECTORY}/.zlogin"    ".zlogin"
  link "${DOTFILES_DIRECTORY}/.zlogout"   ".zlogout"
  link "${DOTFILES_DIRECTORY}/.zpreztorc" ".zpreztorc"
  link "${DOTFILES_DIRECTORY}/.zprofile"  ".zprofile"
  link "${DOTFILES_DIRECTORY}/.zshenv"    ".zshenv"
  link "${DOTFILES_DIRECTORY}/.zshrc"     ".zshrc"

  echo "  Installing custom prompt..."
  if [ ! -e "${HOME}/.zfunctions" ]; then
    mkdir "${HOME}/.zfunctions"
  else
    echo "    Directory ${HOME}/.zfunctions already exists, so we'll use it"
  fi
  link "${DOTFILES_DIRECTORY}/.zprezto/modules/prompt/functions/prompt_knowledgejunkie_setup" ".zfunctions/prompt_knowledgejunkie_setup"

  echo "  Installing custom completions..."
  if [ ! -e "${HOME}/.zfunctions" ]; then
    mkdir "${HOME}/.zfunctions"
  else
    echo "    Directory ${HOME}/.zfunctions already exists, so we'll use it"
  fi
  link "${DOTFILES_DIRECTORY}/.zprezto/modules/completion/_beet" ".zfunctions/_beet"
  link "${DOTFILES_DIRECTORY}/.zprezto/modules/completion/_docker" ".zfunctions/_docker"
}

set_default_shell_to_zsh() {
  echo ""
  echo "Enter password to set zsh as this account's default shell"
  chsh -s /bin/zsh
}

#----------------------------------- vim -------------------------------------
configure_vim() {
  echo "  Configuring..."

  link "${DOTFILES_DIRECTORY}/.vim"   ".vim"
  link "${DOTFILES_DIRECTORY}/.vimrc" ".vimrc"
}

configure_vim_plugins() {
  if [ ! -e "${DOTFILES_DIRECTORY}/.vim/plugged" ]; then
    echo "  Installing plugins..."
    vim +PlugInstall +qall now
  else
    echo "  Updating plugins..."
    vim +PlugUpdate +qall now
  fi
}

#----------------------------------- tmux ------------------------------------
configure_tmux() {
  echo "  Configuring..."

  link "${DOTFILES_DIRECTORY}/.tmux.conf"   ".tmux.conf"
  link "${DOTFILES_DIRECTORY}/.tmuxinator"  ".tmuxinator"
}

configure_tmux_plugins() {
  echo "  Configuring plugins..."

  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  ~/.tmux/plugins/tpm/bin/install_plugins
}

#------------------------------------ i3 -------------------------------------
download_i3blocks_contrib() {
  if [ ! -e "${I3BLOCKS_DIRECTORY}" ]; then
    echo "  Cloning upstream 'i3blocks-contrib' repository..."
    git clone https://github.com/vivien/i3blocks-contrib "${I3BLOCKS_DIRECTORY}" >/dev/null
  else
    echo "  Updating upstream 'i3blocks-contrib' repository..."
    cd ${I3BLOCKS_DIRECTORY}
    git pull >/dev/null
  fi
}

configure_i3() {
  echo "  Configuring..."
  mkdir -p ${XDG_CONFIG_DIRECTORY}
  link "${DOTFILES_DIRECTORY}/.config/i3" ".config/i3"
  link "${DOTFILES_DIRECTORY}/.config/i3blocks" ".config/i3blocks"
}

#----------------------------------- fzf -------------------------------------

download_fzf() {
  if [ ! -e "${FZF_DIRECTORY}" ]; then
    echo "  Cloning upstream 'fzf' repository..."
    git clone https://github.com/junegunn/fzf.git "${FZF_DIRECTORY}" >/dev/null
  else
    echo "  Updating upstream 'fzf' repository..."
    cd ${FZF_DIRECTORY}
    git pull https://github.com/junegunn/fzf.git >/dev/null
  fi
}

configure_fzf() {
  echo "  Configuring..."
  ${FZF_DIRECTORY}/install --bin
  link "${DOTFILES_DIRECTORY}/.fzf.zsh" ".fzf.zsh"

}

#---------------------------------- xmonad -----------------------------------
configure_xmonad() {
  echo "  Configuring..."
  link "${DOTFILES_DIRECTORY}/.xmonad" ".xmonad"
}

#---------------------------------- irssi ------------------------------------
configure_irssi() {
    echo "  Configuring..."
    link "${DOTFILES_DIRECTORY}/.irssi" ".irssi"
}

#--------------------------------- dotfiles ----------------------------------
symlink_dotfiles() {
  echo "  Configuring user scripts directory..."
  link "${DOTFILES_DIRECTORY}/bin"                ".bin"

  echo "  Configuring git template/hooks directory..."
  link "${DOTFILES_DIRECTORY}/.git_template"      ".git_template"

  echo "  Configuring symlinks"
  link "${DOTFILES_DIRECTORY}/.Xresources"        ".Xresources"
  link "${DOTFILES_DIRECTORY}/.abcde.conf"        ".abcde.conf"
  link "${DOTFILES_DIRECTORY}/.ackrc"             ".ackrc"
  link "${DOTFILES_DIRECTORY}/.agignore"          ".agignore"
  link "${DOTFILES_DIRECTORY}/.bash_aliases"      ".bash_aliases"
  link "${DOTFILES_DIRECTORY}/.caffrc"            ".caffrc"
  link "${DOTFILES_DIRECTORY}/.ctags"             ".ctags"
  link "${DOTFILES_DIRECTORY}/.dircolors"         ".dircolors"
  link "${DOTFILES_DIRECTORY}/.dpt.conf"          ".dpt.conf"
  link "${DOTFILES_DIRECTORY}/.dput.cf"           ".dput.cf"
  link "${DOTFILES_DIRECTORY}/.editrc"            ".editrc"
  link "${DOTFILES_DIRECTORY}/.gbp.conf"          ".gbp.conf"
  link "${DOTFILES_DIRECTORY}/.gitconfig"         ".gitconfig"
  link "${DOTFILES_DIRECTORY}/.gitignore"         ".gitignore"
  link "${DOTFILES_DIRECTORY}/.gitk"              ".gitk"
  link "${DOTFILES_DIRECTORY}/.gitmessage"        ".gitmessage"
  link "${DOTFILES_DIRECTORY}/.inputrc"           ".inputrc"
  link "${DOTFILES_DIRECTORY}/.lessfilter"        ".lessfilter"
  link "${DOTFILES_DIRECTORY}/.lintianrc"         ".lintianrc"
  link "${DOTFILES_DIRECTORY}/.mrconfig"          ".mrconfig"
  link "${DOTFILES_DIRECTORY}/.mrtrust"           ".mrtrust"
  link "${DOTFILES_DIRECTORY}/.pbuilderrc"        ".pbuilderrc"
  link "${DOTFILES_DIRECTORY}/.pentadactylrc"     ".pentadactylrc"
  link "${DOTFILES_DIRECTORY}/.quiltrc"           ".quiltrc"
  link "${DOTFILES_DIRECTORY}/.reportbugrc"       ".reportbugrc"
  link "${DOTFILES_DIRECTORY}/.xbindkeysrc"       ".xbindkeysrc"
  link "${DOTFILES_DIRECTORY}/.xinitrc"           ".xinitrc"
  link "${DOTFILES_DIRECTORY}/.ycm_extra_conf.py" ".ycm_extra_conf.py"
}

#-------------------------------- installers ---------------------------------
install_fonts() {
    copy_fonts
    reset_font_cache
}

install_prezto() {
    download_prezto
    configure_prezto
    set_default_shell_to_zsh
}

install_vim() {
    configure_vim
    configure_vim_plugins
}

install_tmux() {
    configure_tmux
    configure_tmux_plugins
}

install_i3() {
    download_i3blocks_contrib
    configure_i3
}

install_fzf() {
    download_fzf
    configure_fzf
}

install_xmonad() {
    configure_xmonad
}

install_irssi() {
    configure_irssi
}

install_dotfiles() {
    symlink_dotfiles
}

do_finished() {
    echo "Finished!"
    echo ""
}

install() {
    aref=$1[@]
    modules=("${!aref}")
    echo ""
    echo "Installing dotfiles:" "${modules[@]}"
    echo ""
    for mod in "${modules[@]}"
    do
        echo "[$mod]"
        if is_installable "$mod" "${modules[@]}"; then
            install_$mod
            echo ""
        else
            echo "  Module $mod not found, skipping..."
            echo ""
        fi
    done

    do_finished
}

#-----------------------------------------------------------------------------

if [[ $# -eq 0 ]] ; then
    install available_modules
else
    install requested_modules
fi
