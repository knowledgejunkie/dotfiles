; Various tips and tricks borrowed, from, amongst others:
;   https://github.com/sjl/dotfiles
;   https://github.com/NilsHaldenwang/dotfiles
;   https://github.com/ColinHebert/dotfiles 
;   http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
;   http://stackoverflow.com/questions/4611512/is-there-a-way-to-make-git-pull-automatically-update-submodules
;   http://mkoby.com/2011/05/02/using-git-submodules/
;   http://stackoverflow.com/questions/12255028/how-to-show-git-colors-on-zsh

[user]
    name = Nick Morrott
    email = knowledgejunkie@gmail.com

[core]
    editor = vim
    pager = less
    symlinks = false
    whitespace = trailing-space,space-before-tab
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

[alias]
    st = status
    ci = commit
    cm = commit -m
    co = checkout
    sub = submodule
    a = add
    aa = add --all
    remove = rm

    stage = add
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
    unstash = stash pop
    discard = checkout --
    discard-merge = reset --hard HEAD

    branches = branch -a
    remotes = remote -v
    tags = tag -l

    cloneall = clone --recursive

    pull = pull --ff-only

    ; If pulling down a submodule shows new commits, you'll probably want to
    ; update (and push) the pointer stored in the superproject to the latest
    ; commit with something like 'git commit -am "Update submodules"; git push'
    ;
    ; 'git submodule update --init --recursive' will update any configured
    ; submodules to the commit ref stored in the superproject, which may not
    ; be the latest commit available, hence the need for the 'git pullall' alias
    pullall = "!f(){ git pull "$@" && git submodule update --init && git submodule foreach git pull origin master; }; f"

    pull-upstream = pull --no-commit --startegy=recursive -X ours
    ; lo = pull origin

    po = push origin

    fo = fetch origin
    fu = fetch upstream

    up = merge --ff-only
    join = merge --no-ff

    id = rev-parse
    root = rev-parse --show-toplevel
    currentbranch = rev-parse --abbrev-ref HEAD

    delete-local-branch = branch -D
    delete-remote-branch = push origin --delete
    delete-local-reference-to-remote-branch = branch -rd

    last = diff HEAD^
    pending = diff --cached
    history = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    l = log -18 --color=always --all --topo-order --pretty='format:%Cgreen%h%Creset %s%Cred%d%Creset %C(black bold)(by %an)%Creset'
    ll = log     --color=always --all --topo-order --pretty='format:%Cgreen%h%Creset %s%Cred%d%Creset %C(black bold)(by %an)%Creset'
    gl = log -12 --color=always --all --graph --topo-order --pretty='format:%Cgreen%h%Creset %s %C(black bold)(by %an)%Creset%C(yellow bold)%d%Creset%n'
    gll = log     --color=always --all --graph --topo-order --pretty='format:%Cgreen%h%Creset %s %C(black bold)(%cr by %an)%Creset%C(yellow bold)%d%Creset%n'
    ; l = log --pretty=format:\"%h | %s%d\" --graph
    log-merge = !git log $(git merge-base --octopus $(git log -1 --merges --pretty=format:%P $1))..$1 --graph --pretty=oneline --abbrev-commit --boundary
    log-all = !git log --graph --decorate --pretty=oneline --abbrev-commit --all $(git fsck --no-reflogs | grep commit | cut -d\\ -f3)

    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    ours     = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs   = "!f() { git checkout --theirs $@ && git add $@; }; f"

    graft = cherry-pick -x
    ack = log --color=always --all --topo-order --pretty='format:%Cgreen%h%Creset %s%Cred%d%Creset %C(black bold)(by %an)%Creset' --full-history -S

[diff]
    algorithm = patience

[difftool]
    ; prompt = false

[push]
    default = current

[merge]
    ; tool = splice

[mergetool "splice"]
    ; cmd = "vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    ; trustExitCode = true

[color]
    ui = auto
    ; diff = auto
    ; status = auto
    ; branch = auto
    ; interactive = auto

; [color "branch"]
;     current = yellow reverse
;     local = yellow
;     remote = green

; [color "diff"]
;     meta = yellow bold
;     frag = magenta bold
;     old = red bold
;     new = green bold

; [color "status"]
;     added = yellow
;     changed = green
;     untracked = cyan

[include]
    path = .gitconfig.user
