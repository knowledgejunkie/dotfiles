; Various tips and tricks borrowed, from, amongst others:
;   https://github.com/sjl/dotfiles
;   https://github.com/NilsHaldenwang/dotfiles
;   https://github.com/ColinHebert/dotfiles
;   http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
;   http://stackoverflow.com/questions/4611512/is-there-a-way-to-make-git-pull-automatically-update-submodules
;   http://mkoby.com/2011/05/02/using-git-submodules/
;   http://stackoverflow.com/questions/12255028/how-to-show-git-colors-on-zsh

[user]
    name = Nick Morrott
    email = knowledgejunkie@gmail.com

[core]
    editor = vim
    pager = less
    symlinks = true
    whitespace = trailing-space,space-before-tab
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

[alias]
    st = status
    ci = commit --verbose
    cm = commit -m
    co = checkout
    ir = rebase --interactive
    sub = submodule

    addall = add --all
    remove = rm

    unstash = stash pop

    discard = checkout --

    stage = add
    unstage = reset HEAD

    amend = commit --amend --verbose
    uncommit = reset --soft "HEAD^"

    discard-merge = reset --hard HEAD

    b = branch -a
    branches = branch -a
    r = remote -v
    remotes = remote -v
    t = tag -l
    tags = tag -l

    cloneall = clone --recursive

    pull = pull --ff-only

    ; If pulling down a submodule shows new commits, you'll probably want to
    ; update (and push) the pointer stored in the superproject to the latest
    ; commit with something like 'git commit -am "Update submodules"; git push'
    ;
    ; 'git submodule update --init --recursive' will update any configured
    ; submodules to the commit ref stored in the superproject, which may not
    ; be the latest commit available, hence the need for the 'git pullall' alias
    pullall = "!f(){ git pull "$@" && git submodule update --init && git submodule foreach git pull origin master; }; f"

    pull-upstream = pull --no-commit --startegy=recursive -X ours
    ; lo = pull origin

    po = push origin

    fo = fetch origin
    fu = fetch upstream
    fg = fetch github

    up = merge --ff-only
    join = merge --no-ff

    id = rev-parse
    root = rev-parse --show-toplevel
    currentbranch = rev-parse --abbrev-ref HEAD

    merged-local-branches = branch --merged
    merged-remote-branches = branch -r --merged
    unmerged-local-branches = branch --no-merged
    unmerged-remote-branches = branch -r --no-merged

    delete-local-branch = branch -D
    delete-remote-branch = push origin --delete
    delete-local-reference-to-remote-branch = branch -rd

    last = diff "HEAD^"
    pending = diff --cached

    history = log --all --graph --date=short --pretty=format:'%Cred%h%Creset - %Cgreen%cd%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset'

    l    = log		 -20 --topo-order --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'
    ll   = log 		     --topo-order --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'
    gl   = log 		 -20 --graph      --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'
    gll  = log 		     --graph      --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'

    la   = log --all -20 --topo-order --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'
    lla  = log --all     --topo-order --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'
    gla  = log --all -20 --graph      --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'
    glla = log --all     --graph      --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset %C(bold blue)<%an>%Creset'

    log-merge = !git log $(git merge-base --octopus $(git log -1 --merges --pretty=format:%P $1))..$1 --graph --pretty=oneline --abbrev-commit --boundary
    log-all   = !git log --graph --decorate --pretty=oneline --abbrev-commit --all $(git fsck --no-reflogs | grep commit | cut -d\\ -f3)

    lf   = log --name-only
    lp   = log --patch --patience
    lw   = whatchanged

    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    ours     = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs   = "!f() { git checkout --theirs $@ && git add $@; }; f"

    graft = cherry-pick -x

    ignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"

    zip-current-branch = !git archive --format zip --output=./$(pwd | rev | cut -d/ -f1 | rev).zip $(git currentbranch)

    wdiff = diff --color-words
    wshow = show --color-words

    ctags = !.git/hooks/ctags

    authors = shortlog -sne --all
    committers = shortlog -snce --all

	files = "!f() { git diff --name-status \"$1^\" \"$1\" ; }; f"
	mgrep = "!f() { git log --all --regexp-ignore-case --grep=\"$1\" ; } ; f"
	mlog  = log --all --topo-order --date=short --pretty=format:'%Cred%h%Creset - %Cgreen%cd%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --full-history --regexp-ignore-case --grep
	cgrep = "!f() { git log --patch --all --regexp-ignore-case -G\"$1\" ; }; f"
	clog  = log --all --topo-order --date=short --pretty=format:'%Cred%h%Creset - %Cgreen%cd%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --full-history --regexp-ignore-case -G
	pgrep = "!f() { git log --patch --all --regexp-ignore-case --pickaxe-regex -S\"$1\" ; }; f"
	plog  = log --all --topo-order --date=short --pretty=format:'%Cred%h%Creset - %Cgreen%cd%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' --full-history --regexp-ignore-case --pickaxe-regex -S

[diff]
    algorithm = patience

[pager]
    log = diff-highlight | less
    show = diff-highlight | less
    diff = diff-highlight | less

[push]
    default = current

[color]
    ui = auto
    ; diff = auto
    ; status = auto
    branch = auto
    interactive = auto

[color "diff"]
    meta = 3
    frag = 13
    old  = 1
    new  = 2

[color "status"]
    ; header =
    added     = 2
    changed   = 9
    untracked = 1
    ; branch =
    ; nobranch =

; [color "branch"]
    ; current = 3 reverse
    ; local = 3
    ; remote = 2

[include]
    path = .gitconfig.user
[init]
    templatedir = ~/.git_template
